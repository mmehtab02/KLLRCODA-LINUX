Schedule tasks
When we look on Linux administration, without these new approaches we have now, we also can see some automation. During these years, when Unix and Linux system were (and still are) core and central element of every platform, we automated the work through scripts and schedulers.
This lesson is about Linux scheduler - cron.
During this lesson we will learn the difference between cron and crontab and how to define and monitor executions.
__________________________
What is crontab
Although the title is about crontab, we start our story from something else - cron.
Cron, the daemon
What is service, or daemon, how to use them - we will learn later. Now it is enough to say, that cron is a service responsible for control and execution of scheduled tasks. It is started when system is booting and works till the system is shut down.
Let's see a few ways how we can check the status of the service.
systemctl status cron.service
This command is a management command for systemd. What is interesting for us at this moment is only this part of the displayed information:
Active: active (running)
This means that the service is active.
ps aux | grep cron
Shows processes related to the cron service. We should see something similar to
root 565 0.0 0.1 8536 3084 ? Ss 19:48 0:00 /usr/sbin/cron -f
So, to conclude this part, cron is a service which controls multiple crontabs.
Crontab
We know what is cron already. So, what is crontab?
crontab is simply a list of tasks or commands which are scheduled to be executed on specific date and time. The thing is, that Linux have many crontabs. Let's go through them.
/etc/crontab
The first file we discuss is located in /etc/ directory. Let's see it
ls -al /etc/crontab
This is the system wide crontab. As you can see, all users can read, but only admins can edit this file. What we keep there? Generally, system related, admin stuff. But please remember, it is not root's crontab, this one is somewhere else. Again, it is system-wide crontab.
This crontab has associated directory - /etc/cron.d. Let's see what is inside
ls -al /etc/cron.d
Well, here we have scrips, which are scheduled in /etc/crontab.
cron.daily and others
In this directory we have a few more directories.
ls -al /etc/cron.* -d
You should see
drwxr-xr-x 2 root root 4096 Oct  7  2021 /etc/cron.daily
drwxr-xr-x 2 root root 4096 Oct  7  2021 /etc/cron.hourly
drwxr-xr-x 2 root root 4096 Oct  7  2021 /etc/cron.monthly
drwxr-xr-x 2 root root 4096 Oct  7  2021 /etc/cron.weekly


I think you get the idea. These directories contain scripts which are executed... daily, hourly, monthly or weekly.
Let's see one example
ls -al /etc/cron.daily
Well, there is no crontab, only scripts (and .placeholder, which is obligatory). If you don't believe me, check :)
cat /etc/cron.daily/dpkg
How these are executed? How system knows when to do it? Well, the answer is in the file which we already know:
cat /etc/crontab
We have four anacron command executed with different scheduling. We will learn about it later. What is anacron?
It is scheduler too. But works a little bit differently than cron. Unlike the cron, anacron doesn't assume that the machine is run continuously without stops. It is crucial for system's scripts which must be executed daily, for example.
Ok, let's jump to another location.
/var/spool/cron/crontabs
In this directory (which is empty at this moment) user's crontabs are stored. It is related to root's crontab as well.
ls -al /var/spool/cron/crontabs we confirmed, the directory is empty. It is time to jump to the next chapter and learn how to define task in crontab!
_____________________
Set the task in crontab
Before we set the task, we need to learn about syntax. It is easy, but I think, you will need some time to memorize it :)
Ok, imagine your crontab now. You have there...
1 17 7 4 2 /usr/bin/ls >/dev/null 2>&1
What the hell is that!?
Ok... Let's look on etc/crontab now. You can also read the documentation (for example info crontab )
What we have there?
# Example of job definition:
# .---------------- minute (0 - 59)
# |  .------------- hour (0 - 23)
# |  |  .---------- day of month (1 - 31)
# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...
# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
# |  |  |  |  |
# *  *  *  *  * user-name command to be executed
17 *    * * *   root    cd / && run-parts --report /etc/cron.hourly


Ok, now we can talk.
We have a few elements here, we can go through them, one by one.
minute defines on which minute scheduler should execute the program. In our example above, it is 1 minute after specified hour.
hour defines hour for execution. In our example it is 5PM. Yes, Linux takes here 24 hours for a day.
day of the month as above, but for day in the month. In the example above it is 7th day of the month.
month as you can expect, the month. It may be a number, or text. In our example it is 4th month, so April. You can use apr.
weekday final option defines the weekday. In our example it is 2, what means Tuesday. Please remember, Sunday can be defined as 0 and 7 as well.
So, in our example, system will execute the command at 17:1 on 7th of April. But only if it will be Tuesday.
Well, it is not handy. If we set day/month, we generally not set weekday. The same in oposite direction. If we want to keep every in any of position, we use *. So, if we set 15 * as two first elements, it means: execute 15 minutes after every hour. If we set * for minutes, it means every minute. And this is the biggest granularity possible for scheduling tasks.
Right, let's finalise our journey through crontab.
user - we do not set user for user related crontabs, it doesn't make any sense, but for system wide crontab this possibility is valuable. It might be used for specific cases, when some operation should be performed by specific user, but the operation itself is system wide.
command. This is simple :D
Please notice, that the example provided above the lines from documentation, doesn't contain user .
And finally... >/dev/null 2>&1 from the example. You should recognize this contruction. We redirect all output into /dev/null.
Right... it is the time to set our cronjob! Finally!
Setting cronjob
Each entry in crontab is called cronjob.
To list our jobs, we execute
crontab -l
What we see now, is
no crontab for root. It is because there is no job defined.
Let's define a job, which will be executed at 9:12, every 23rd day of month. We want to do ls of /var/log send all output to logfile.
crontab -e opens crontab editor. (at the first time, we need to set the default editor. I prefer vim :) )
Let's put there
12 9 23 * * /usr/bin/ls -al > logfile 2>&1
And save the file with :wq
You should see installing new crontab
Is it set?
crontab -l
Yes, it is!
As you can see, I intentionally used usr/bin/ls - full, absolute path. It is not needed in this example, however it is a good practice to do. Remember, cronjob, when executed, will create another shell. We need to ensure that this newly created shell is able to use our system. In this example, when I use ls, my shell is looking for executable in defined $PATH. What will happen, if new shell will not have $PATH defined?
Ok, let's change something to see, if it really works. Change the schedule to * * * * * - every minute.
Now we need to wait a moment, and the nwe should be able to successfuly execute
cat logfile
Yeah! We have our first crontab!
Where is it configured? Do you remember material from previous page?
ls -al /var/spool/cron/crontabs/root
Yes, we have a file, root. It means, user root created it, root is an owner, and the group assigned is crontab. Let's look inside
cat /var/spool/cron/crontabs/root
The file contains exactly what we defined.
Logs
Different Linux distribution will log cronjob execution in different logs. Here, in Ubuntu, we need to go through /var/log/syslog. Execute
cat /var/log/syslog
and look for May 13 22:31:01 ubuntu CRON[24797]: (root) CMD (/usr/bin/ls -al > logfile 2>&1) (date for you will be different, obviously)
We can use journactl as well
journalctl -u cron
We run journalctl for all entries for user cron
Obviously, we can use also the systemctl command
systemctl status cron.service
Cool crontab generators can be found here and here.
___________________________
Congratulations
After this lesson you know what cron is, where to find crontabs and how to schedule tasks. Soon you will learn how to create more complicated schedules.



