Know your files
This lesson will be different. Shorter and easier :) This time we will talk about methods to obtain information about files. I do not expect that this will be more popular command in your toolset, but you will appreciate this command very quickly.
We will learn two commands, stat and file.
__________________
1. file
Get information with file
The first useful command is file. It is not the abreviation this time :)
We can use this command to every file in Linux. And, as we already know, in Linux everything is a file, so... Yes, we can use this command on simple text file, or on /dev/null devince (like we did in previous lesson).
Here is a list of entities we will check in this lab:
empty text file
text file with content
directory
binary exacutable (i.e. /bin/bash)
packed file
/dev/vda (or another device)
Ok, let's get started!
First, we create empty text file
touch myfile
And let's use our first command on the file
file myfile
In response we have myfile: empty. System knows only one thing - there is nothing inside.
Ok, we will put some content to the file.
echo 'this is my very creative text!' > myfile
What we will see after running file again?
file myfile
System correctly recognized the file as myfile: ASCII text.
Let's see what happen if we create script.
touch mybashscript.sh
file mybashscript.sh
So, we see the same thing. System doesn't care about file extension (lucky us, believe me), but about content.
Right. Now we do the script, shall we?
echo "#! /bin/bash" > mybashscript.sh
This is all we need :)
The line we provided - #! / bin/bash is called shebang. For now it will be enough for you to know, this is the information about the interpreter which Linux should use to 'understand' and execute the script.
file mybashscript.sh
And we have
mybashscript.sh: Bourne-Again shell script, ASCII text executable
Wait... executable? We didn't talk about file permissions, but believe me, this information doesn't mean that the file actually has the execute permission. If we add this permission, nothing will change from the perspective of file command.
Now we will create a Perl script
echo "#! /bin/perl" > myperlscript.nomatterwhat
file myperlscript.nomatterwhat
And we see myperlscript.nomatterwhat: Perl script text executable, what proves what I said about extensions.
Let's try omething funny
echo "#! /bin/notexistinginterpreter" > mymysteryscript
We try to use not existing interpreter. And we've got mymysteryscript: a /bin/notexistinginterpreter script, ASCII text executabl. So, shebang is interpreted as executable, but unknown type, so system said "ASCII" to not shame itself that it doesn't understand what we want.
Remember, the language is not recognized by shebang only. There are some other elements which file is looking for and it tries to determine it on the first lines of code, not only first one.
We can use file on directories (yes, it is very logical).
file /var/log
We received /var/log: directory, as expected.
What about binaries?
file /bin/bash
Now Linux is more talkative: /bin/bash: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=a6cb40078351e05121d46daa768e271846d5cc54, for GNU/Linux 3.2.0, stripped. We have a lot information about this binary.
Can we check some compressed files?
file /usr/local/go/lib/time/zoneinfo.zip
Will return /usr/local/go/lib/time/zoneinfo.zip: Zip archive data, at least v1.0 to extract
file /usr/local/go/src/archive/tar/testdata/xattrs.tar
And we've got /usr/local/go/src/archive/tar/testdata/xattrs.tar: POSIX tar archive
And so on.
Now interesting part.
Do you remember? Everything is a file!
I'' leave it as a mystery for now, but our system on Killercoda is installed on disk, which is recognized as /dev/vda1. Let's check what it is!
file /dev/vda1
And we see /dev/vda1: block special (252/1)
Let's check two more
file /dev/null
file /dev/random
Do you see any differences?
You can experiment with file command. For example, yyou can repeat execution for all files we checked before, but now with -i argument, which will return mime data about file (which is less readable for human).
We can use -s argument for devices (well, for all types, but I find it most useful for devices) to get another information.
stat -s /dev/vda
stat -s /dev/vda1 stat -s /dev/random
stat -s /dev/null
I hope you noticed the difference between /dev/vda and /dev/vda1. If yes, splendid, we will talk about it... Yes, you right! Soon! :)
____________
2. stat
Get information with stat
stat allows us to get diffeerent type of information than file. With file we can learn what is the type of the file. It determines the type, like file, directory, package, device etc, and if file type is confirmed, it tries to understand the language (based on some structures and strings).
stat shows information, which we can clasify like more system-oriented. We didn't discussed many of the aspects shown by stat, therefore we do not go deep into understanding of this command, it is timme for being just familiar with it.
Let's take a look on the output.
stat mybashscript.sh
Well, the output is much more rich than from file.
 File: mybashscript.sh
  Size: 13              Blocks: 8          IO Block: 4096   regular file
Device: fc01h/64513d    Inode: 70881       Links: 1
Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)
Access: 2022-05-15 08:41:12.980389577 +0000
Modify: 2022-05-15 08:41:08.804084682 +0000
Change: 2022-05-15 08:41:08.804084682 +0000
 Birth: -


What do we have here?
File - it is obvious, this is the name of our file.
Size - the size of thee file in bytes.
Blocks - the size of the file, but in blocks.
IO Block - size of the each blocks.
Every block device, like hard drive, is structured in blocks. Block is the largerst disk space which can be allocated by one I/O operation. This size is represented by IO Block.
regular file - the type of the object. We will not get detailed information about the language, only the type, like file, pipe, directory or special file.
Device - hex/decimal ID of the device on which object is located.
Inode - Inode ID. Inode and Device create the unique identification of the object.
Links ({{}} - number of hard links created. For now is enough to understand, that every file will have 1, if there is no hard links created. 0 means the file is deleted.
Tricky thing. If you run stat agains the directory, Links will show number of files in the directory.
Access - the permission matrix for the object.
Uid and Gid - owner and owner's group identifiers.
Access, Modify and Change - these three represent timestamps when some specific action was taken against the file. Access shows almost the time of last access to the file. But for specific reason, in modern Linux systems (read optimization) this value will be updated only if is older than Modify timestamp. Modify says about last modification of the content. And Change is about all changes - content and attributes (like permissions, for example).
Birth is reserved for the time when file was created, but is not implemented in Linux systems.
Sometimes we can see Context. It is the Selinux description.
More functionalities
stat has parameters, like most of commands in Linux. Let's look on some.
stat -f mybashscript.sh
-f gives us information about filesystem.
 File: "mybashscript.sh"
    ID: e75e6c15bddd0af4 Namelen: 255     Type: ext2/ext3
Block size: 4096       Fundamental block size: 4096
Blocks: Total: 2495808    Free: 1343138    Available: 1339042
Inodes: Total: 1290240    Free: 1176298


Here we have information related to the filesystem on which the file is located. For example, Namelen inform us about the maximum filename leghth possible to set.
stat -t mybashscript.sh
Will return condensed version of the information. Very cool to automation and use in scripts.
mybashscript.sh 13 8 81a4 0 0 fc01 70875 1 0 0 1652607024 1652607012 1652607012 0 4096
We can customize the output
stat --printf="File %n is %s bytes, and is a %F\n" mybashscript.sh
File mybashscript.sh is 13 bytes, and is a regular file.
To find more about customization, use man stat
____________
Congratulations
You know what you can do to get information about files in your system. It's not the end of the story, but it's a great start.



